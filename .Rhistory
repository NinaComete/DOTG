# Afficher le résultat si une stabilité est trouvée pour G_200001_1_learn
if (stabilite_trouvee_learn) {
print(paste("La valeur stabilisée de avg.accuracy pour 200001-1-learn est :", round(valeur_stabilite_learn, 4), "à l'itération", iteration_stabilite_learn))
} else {
print("Aucune stabilité trouvée pour avg.accuracy (200001-1-learn).")
}
# Modifier le graphique pour inclure l'étiquette au point de croisement des courbes pour G_200001_1_learn
evolution_success_accuracy_G_200001_1_learn <- ggplot(G_200001_1_learn, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "blue", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate (200001-1-learn)")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy (200001-1-learn)"), color = "red") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite_learn,
y = valeur_stabilite_learn,
label = paste("avg.ssrate : ", round(G_200001_1_learn$avg.ssrate[iteration_stabilite_learn], 4), "(", iteration_stabilite_learn, ")\n",
"avg.accuracy : ", round(valeur_stabilite_learn, 4), "(", iteration_stabilite_learn, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le point de croisement
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_learn : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate (200001-1-learn)" = "solid", "avg.accuracy (200001-1-learn)" = "solid")) +  # Style des lignes
labs(linetype = "Variable") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique pour G_200001_1_learn
print(evolution_success_accuracy_G_200001_1_learn)
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte pour G_200001_1_random
indices_stabilite_random <- which(diff(G_200001_1_random$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations pour G_200001_1_random
stabilite_trouvee_random <- FALSE
for (i in indices_stabilite_random) {
if (all(diff(G_200001_1_random$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite_random <- i + 1
valeur_stabilite_random <- G_200001_1_random$avg.accuracy[iteration_stabilite_random]
stabilite_trouvee_random <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée pour G_200001_1_random
if (stabilite_trouvee_random) {
print(paste("La valeur stabilisée de avg.accuracy pour 200001-1-random est :", round(valeur_stabilite_random, 4), "à l'itération", iteration_stabilite_random))
} else {
print("Aucune stabilité trouvée pour avg.accuracy (200001-1-random).")
}
# Modifier le graphique pour inclure l'étiquette au point de croisement des courbes pour G_200001_1_random
evolution_success_accuracy_G_200001_1_random <- ggplot(G_200001_1_random, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "purple", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate (200001-1-random)")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy (200001-1-random)"), color = "orange") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite_random,
y = valeur_stabilite_random,
label = paste("avg.ssrate : ", round(G_200001_1_random$avg.ssrate[iteration_stabilite_random], 4), "(", iteration_stabilite_random, ")\n",
"avg.accuracy : ", round(valeur_stabilite_random, 4), "(", iteration_stabilite_random, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le point de croisement
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_random : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate (200001-1-random)" = "solid", "avg.accuracy (200001-1-random)" = "solid")) +  # Style des lignes
labs(linetype = "Variable") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique pour G_200001_1_random
print(evolution_success_accuracy_G_200001_1_random)
# Superposition des graphiques
# Charger la bibliothèque gridExtra
install.packages("gridExtra")
library(gridExtra)
# Superposition des graphiques
combined_plot <- grid.arrange(evolution_success_accuracy_G_200001_1_learn, evolution_success_accuracy_G_200001_1_random, nrow = 2)
print(combined_plot)
source("~/R_DOTG/Evolution_success_accuracy_DOTG_1.R", encoding = 'WINDOWS-1252')
library(ggplot2)
library(readr)
library(gridExtra)
# Chargement des données
G_200001_1_learn <- read.csv("D:\\Users\\hlendrin\\Documents\\R_DOTG\\200001-1-learn\\average.csv", header = TRUE, sep = " ")
G_200001_1_random <- read.csv("D:\\Users\\hlendrin\\Documents\\R_DOTG\\200001-1-random\\average.csv", header = TRUE, sep = " ")
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.0000001  # Seuil pour les fichiers
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte pour G_200001_1_learn
indices_stabilite_learn <- which(diff(G_200001_1_learn$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations pour G_200001_1_learn
stabilite_trouvee_learn <- FALSE
for (i in indices_stabilite_learn) {
if (all(diff(G_200001_1_learn$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite_learn <- i + 1
valeur_stabilite_learn <- G_200001_1_learn$avg.accuracy[iteration_stabilite_learn]
stabilite_trouvee_learn <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée pour G_200001_1_learn
if (stabilite_trouvee_learn) {
print(paste("La valeur stabilisée de avg.accuracy pour 200001-1-learn est :", round(valeur_stabilite_learn, 4), "à l'itération", iteration_stabilite_learn))
} else {
print("Aucune stabilité trouvée pour avg.accuracy (200001-1-learn).")
}
# Modifier le graphique pour inclure l'étiquette au point de croisement des courbes pour G_200001_1_learn
evolution_success_accuracy_G_200001_1_learn <- ggplot(G_200001_1_learn, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "blue", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate (200001-1-learn)")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy (200001-1-learn)"), color = "red") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite_learn,
y = valeur_stabilite_learn,
label = paste("avg.ssrate : ", round(G_200001_1_learn$avg.ssrate[iteration_stabilite_learn], 4), "(", iteration_stabilite_learn, ")\n",
"avg.accuracy : ", round(valeur_stabilite_learn, 4), "(", iteration_stabilite_learn, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le point de croisement
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_learn : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate (200001-1-learn)" = "solid", "avg.accuracy (200001-1-learn)" = "solid")) +  # Style des lignes
labs(linetype = "Variable") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique pour G_200001_1_learn
print(evolution_success_accuracy_G_200001_1_learn)
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte pour G_200001_1_random
indices_stabilite_random <- which(diff(G_200001_1_random$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations pour G_200001_1_random
stabilite_trouvee_random <- FALSE
for (i in indices_stabilite_random) {
if (all(diff(G_200001_1_random$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite_random <- i + 1
valeur_stabilite_random <- G_200001_1_random$avg.accuracy[iteration_stabilite_random]
stabilite_trouvee_random <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée pour G_200001_1_random
if (stabilite_trouvee_random) {
print(paste("La valeur stabilisée de avg.accuracy pour 200001-1-random est :", round(valeur_stabilite_random, 4), "à l'itération", iteration_stabilite_random))
} else {
print("Aucune stabilité trouvée pour avg.accuracy (200001-1-random).")
}
# Modifier le graphique pour inclure l'étiquette au point de croisement des courbes pour G_200001_1_random
evolution_success_accuracy_G_200001_1_random <- ggplot(G_200001_1_random, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "purple", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate (200001-1-random)")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy (200001-1-random)"), color = "orange") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite_random,
y = valeur_stabilite_random,
label = paste("avg.ssrate : ", round(G_200001_1_random$avg.ssrate[iteration_stabilite_random], 4), "(", iteration_stabilite_random, ")\n",
"avg.accuracy : ", round(valeur_stabilite_random, 4), "(", iteration_stabilite_random, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le point de croisement
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_random : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate (200001-1-random)" = "solid", "avg.accuracy (200001-1-random)" = "solid")) +  # Style des lignes
labs(linetype = "Variable") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique pour G_200001_1_random
print(evolution_success_accuracy_G_200001_1_random)
# Superposition des graphiques
# Charger la bibliothèque gridExtra
install.packages("gridExtra")
library(gridExtra)
# Superposition des graphiques
combined_plot <- grid.arrange(evolution_success_accuracy_G_200001_1_learn, evolution_success_accuracy_G_200001_1_random, nrow = 2)
print(combined_plot)
install.packages("gridExtra")
library(ggplot2)
library(readr)
library(gridExtra)
# Chargement des données
G_200001_1_learn <- read.csv("D:\\Users\\hlendrin\\Documents\\R_DOTG\\200001-1-learn\\average.csv", header = TRUE, sep = " ")
G_200001_1_random <- read.csv("D:\\Users\\hlendrin\\Documents\\R_DOTG\\200001-1-random\\average.csv", header = TRUE, sep = " ")
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.0000001  # Seuil pour les fichiers
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte pour G_200001_1_learn
indices_stabilite_learn <- which(diff(G_200001_1_learn$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations pour G_200001_1_learn
stabilite_trouvee_learn <- FALSE
for (i in indices_stabilite_learn) {
if (all(diff(G_200001_1_learn$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite_learn <- i + 1
valeur_stabilite_learn <- G_200001_1_learn$avg.accuracy[iteration_stabilite_learn]
stabilite_trouvee_learn <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée pour G_200001_1_learn
if (stabilite_trouvee_learn) {
print(paste("La valeur stabilisée de avg.accuracy pour 200001-1-learn est :", round(valeur_stabilite_learn, 4), "à l'itération", iteration_stabilite_learn))
} else {
print("Aucune stabilité trouvée pour avg.accuracy (200001-1-learn).")
}
# Modifier le graphique pour inclure l'étiquette au point de croisement des courbes pour G_200001_1_learn
evolution_success_accuracy_G_200001_1_learn <- ggplot(G_200001_1_learn, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "blue", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate (200001-1-learn)")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy (200001-1-learn)"), color = "red") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite_learn,
y = valeur_stabilite_learn,
label = paste("avg.ssrate : ", round(G_200001_1_learn$avg.ssrate[iteration_stabilite_learn], 4), "(", iteration_stabilite_learn, ")\n",
"avg.accuracy : ", round(valeur_stabilite_learn, 4), "(", iteration_stabilite_learn, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le point de croisement
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_learn : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate (200001-1-learn)" = "solid", "avg.accuracy (200001-1-learn)" = "solid")) +  # Style des lignes
labs(linetype = "Variable") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique pour G_200001_1_learn
print(evolution_success_accuracy_G_200001_1_learn)
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte pour G_200001_1_random
indices_stabilite_random <- which(diff(G_200001_1_random$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations pour G_200001_1_random
stabilite_trouvee_random <- FALSE
for (i in indices_stabilite_random) {
if (all(diff(G_200001_1_random$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite_random <- i + 1
valeur_stabilite_random <- G_200001_1_random$avg.accuracy[iteration_stabilite_random]
stabilite_trouvee_random <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée pour G_200001_1_random
if (stabilite_trouvee_random) {
print(paste("La valeur stabilisée de avg.accuracy pour 200001-1-random est :", round(valeur_stabilite_random, 4), "à l'itération", iteration_stabilite_random))
} else {
print("Aucune stabilité trouvée pour avg.accuracy (200001-1-random).")
}
# Modifier le graphique pour inclure l'étiquette au point de croisement des courbes pour G_200001_1_random
evolution_success_accuracy_G_200001_1_random <- ggplot(G_200001_1_random, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "purple", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate (200001-1-random)")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy (200001-1-random)"), color = "orange") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite_random,
y = valeur_stabilite_random,
label = paste("avg.ssrate : ", round(G_200001_1_random$avg.ssrate[iteration_stabilite_random], 4), "(", iteration_stabilite_random, ")\n",
"avg.accuracy : ", round(valeur_stabilite_random, 4), "(", iteration_stabilite_random, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le point de croisement
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_random : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate (200001-1-random)" = "solid", "avg.accuracy (200001-1-random)" = "solid")) +  # Style des lignes
labs(linetype = "Variable") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique pour G_200001_1_random
print(evolution_success_accuracy_G_200001_1_random)
# Superposition des graphiques
combined_plot <- grid.arrange(evolution_success_accuracy_G_200001_1_learn, evolution_success_accuracy_G_200001_1_random, nrow = 2)
print(combined_plot)
install.packages("gridExtra")
source("~/R_DOTG/Evolution_success_accuracy_DOTG_1.R", encoding = 'WINDOWS-1252')
source("~/R_DOTG/Evolution_success_accuracy_DOTG_1.R", encoding = 'WINDOWS-1252')
install.packages("gridExtra")
install.packages("gridExtra")
View(G_200001_1_learn)
View(evolution_success_accuracy_G_200001_1_learn)
library(readr)
parameters_200001_0_8_learn <- read_table("R_DOTG/200001-0.8-learn/parameters.csv")
View(parameters_200001_0_8_learn)
library(readr)
parameters_200001_0_8_random <- read_table("R_DOTG/200001-0.8-random/parameters.csv")
View(parameters_200001_0_8_random)
library(readr)
average_200001_0_2_learn <- read_table("R_DOTG/200001-0.2-learn/average.csv")
View(average_200001_0_2_learn)
library(readr)
average_200001_0_2_random <- read_table("R_DOTG/200001-0.2-random/average.csv")
View(average_200001_0_2_random)
library(readr)
run1_200001_0_2_random <- read_table("R_DOTG/200001-0.2-random/run1.csv")
View(run1_200001_0_2_random)
library(readr)
run1_200001_0_2_learn <- read_table("R_DOTG/200001-0.2-learn/run1.csv")
View(run1_200001_0_2_learn)
library(readr)
run2_200001_0_2_learn <- read_table("R_DOTG/200001-0.2-learn/run2.csv")
View(run2_200001_0_2_learn)
library(readr)
run2_200001_0_2_random <- read_table("R_DOTG/200001-0.2-random/run2.csv")
View(run2_200001_0_2_random)
library(readr)
run3_200001_0_2_random <- read_table("R_DOTG/200001-0.2-random/run3.csv")
View(run3_200001_0_2_random)
library(readr)
run3_200001_0_2_learn <- read_table("R_DOTG/200001-0.2-learn/run3.csv")
View(run3_200001_0_2_learn)
library(readr)
run4_200001_0_2_learn <- read_table("R_DOTG/200001-0.2-learn/run4.csv")
View(run4_200001_0_2_learn)
library(readr)
run4_200001_0_2_random <- read_table("R_DOTG/200001-0.2-random/run4.csv")
View(run4_200001_0_2_random)
library(readr)
run10_200001_0_2_random <- read_table("R_DOTG/200001-0.2-random/run10.csv")
View(run10_200001_0_2_random)
library(readr)
run10_200001_0_2_learn <- read_table("R_DOTG/200001-0.2-learn/run10.csv")
View(run10_200001_0_2_learn)
# Importer les données
url <- "https://raw.githubusercontent.com/NinaComete/DOTG/master/10001-1-learn/average.csv"
G_10001_1_learn <- read.csv(url, header = TRUE, sep = " ")
# Trouver l'indice où avg.genAccuracy est maximale
max_index <- which.max(G_10001_1_learn$avg.genAccuracy)
# Récupérer le rang correspondant à cet indice
max_rank <- G_10001_1_learn$rank[max_index]
# Récupérer la valeur de avg.genAccuracy à ce point
max_avg_gen_accuracy <- G_10001_1_learn$avg.genAccuracy[max_index]
# Trouver l'index du point où avg.genAccuracy est maximale
max_index_accuracy <- which.max(G_10001_1_learn$avg.genAccuracy)
# Trouver l'index du point où avg.genSrate est maximale
max_index_srate <- which.max(G_10001_1_learn$avg.genSrate)
# Récupérer le rang et la valeur correspondant au max de avg.genAccuracy
max_rank_accuracy <- G_10001_1_learn$rank[max_index_accuracy]
max_value_accuracy <- G_10001_1_learn$avg.genAccuracy[max_index_accuracy]
# Récupérer le rang et la valeur correspondant au max de avg.genSrate
max_rank_srate <- G_10001_1_learn$rank[max_index_srate]
max_value_srate <- G_10001_1_learn$avg.genSrate[max_index_srate]
# Trouver tous les points de croisement entre les courbes avg.genAccuracy et avg.genSrate
cross_index <- which(G_10001_1_learn$avg.genAccuracy >= G_10001_1_learn$avg.genSrate)
# Sélectionner le point qui maximise avg.genAccuracy parmi les points de croisement
max_cross_index <- cross_index[which.max(G_10001_1_learn$avg.genAccuracy[cross_index])]
# Récupérer le rang et les valeurs d'avg.genAccuracy et avg.genSrate au point de croisement maximal
cross_rank <- G_10001_1_learn$rank[max_cross_index]
cross_value_accuracy <- G_10001_1_learn$avg.genAccuracy[max_cross_index]
cross_value_srate <- G_10001_1_learn$avg.genSrate[max_cross_index]
# Tracer le graphique avec les deux courbes et les points de max annotés
library(ggplot2)
ggplot(G_10001_1_learn, aes(x = rank)) +
geom_line(aes(y = avg.genAccuracy), color = "red") +
geom_line(aes(y = avg.genSrate), color = "blue") +
geom_point(data = G_10001_1_learn[max_index_accuracy, ], aes(x = rank, y = avg.genAccuracy), color = "red", size = 3) +
geom_point(data = G_10001_1_learn[max_index_srate, ], aes(x = rank, y = avg.genSrate), color = "blue", size = 3) +
annotate("point", x = cross_rank, y = cross_value_accuracy, color = "black", size = 3) +
annotate("text", x = cross_rank + 10000, y = cross_value_accuracy + 0.01, label = paste("Point de croisement :", cross_rank, "\navg.genAccuracy =", round(cross_value_accuracy, digits = 4), "\navg.genSrate =", round(cross_value_srate, digits = 4)), vjust = -0.5, hjust = 1, color = "black") +
geom_text(data = G_10001_1_learn[max_index_accuracy, ], aes(x = rank + 10000, y = avg.genAccuracy, label = paste("Max avg.genAccuracy :", max_rank_accuracy, ", value =", round(max_value_accuracy, digits = 4))), vjust = 1.5, hjust = -0.1, color = "red") +
labs(title = "Période 10001 : évolution de la précision moyenne (avg.genAccuracy) des connaissances et du succès moyen des interaction (avg.genSrate) ") +
theme_minimal()
library(ggplot2)
# Liste des URLs des fichiers
urls <- c("https://raw.githubusercontent.com/NinaComete/DOTG/master/200001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/5001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/10001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/20001-1-learn/average.csv")
# Initialisation du tableau de données
tableau_periode_1 <- data.frame(nom_fichier = character(),
max_avg_gen_accuracy = numeric(),
max_avg_gen_srate = numeric(),
cross_rank = numeric(),
cross_value_accuracy = numeric(),
cross_value_srate = numeric(),
stringsAsFactors = FALSE)
# Boucle sur chaque URL
for (url in urls) {
# Charger les données
data <- read.csv(url, header = TRUE, sep = " ")
# Trouver l'indice où avg.genAccuracy est maximale
max_index_accuracy <- which.max(data$avg.genAccuracy)
max_value_accuracy <- data$avg.genAccuracy[max_index_accuracy]
# Trouver l'indice où avg.genSrate est maximale
max_index_srate <- which.max(data$avg.genSrate)
max_value_srate <- data$avg.genSrate[max_index_srate]
# Trouver tous les points de croisement entre les courbes avg.genAccuracy et avg.genSrate
cross_index <- which(data$avg.genAccuracy >= data$avg.genSrate)
# Sélectionner le point qui maximise avg.genAccuracy parmi les points de croisement
max_cross_index <- cross_index[which.max(data$avg.genAccuracy[cross_index])]
# Récupérer le rang et les valeurs d'avg.genAccuracy et avg.genSrate au point de croisement maximal
cross_rank <- data$rank[max_cross_index]
cross_value_accuracy <- data$avg.genAccuracy[max_cross_index]
cross_value_srate <- data$avg.genSrate[max_cross_index]
# Extraire le nom du fichier à partir de l'URL
nom_fichier <- gsub("^.*/(\\d+-\\d+-learn)/.*$", "\\1", url)
# Ajouter les informations au tableau de données
tableau_periode_1 <- rbind(tableau_periode_1, data.frame(nom_fichier = nom_fichier,
max_avg_gen_accuracy = max_value_accuracy,
max_avg_gen_srate = max_value_srate,
cross_rank = cross_rank,
cross_value_accuracy = cross_value_accuracy,
cross_value_srate = cross_value_srate))
}
View(tableau_periode_1)
View(tableau_periode_1)
library(ggplot2)
# Liste des URLs des fichiers
urls <- c("https://raw.githubusercontent.com/NinaComete/DOTG/master/200001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/5001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/10001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/20001-1-learn/average.csv")
# Initialisation du tableau de données
tableau_periode_1 <- data.frame(nom_fichier = character(),
max_avg_gen_accuracy = numeric(),
max_avg_gen_srate = numeric(),
cross_rank = numeric(),
cross_value_accuracy = numeric(),
cross_value_srate = numeric(),
stringsAsFactors = FALSE)
# Boucle sur chaque URL
for (url in urls) {
# Charger les données
data <- read.csv(url, header = TRUE, sep = " ")
# Trouver l'indice où avg.genAccuracy est maximale
max_index_accuracy <- which.max(data$avg.genAccuracy)
max_value_accuracy <- data$avg.genAccuracy[max_index_accuracy]
# Trouver l'indice où avg.genSrate est maximale
max_index_srate <- which.max(data$avg.genSrate)
max_value_srate <- data$avg.genSrate[max_index_srate]
# Trouver tous les points de croisement entre les courbes avg.genAccuracy et avg.genSrate
cross_index <- which(data$avg.genAccuracy >= data$avg.genSrate)
# Sélectionner le point qui maximise avg.genAccuracy parmi les points de croisement
max_cross_index <- cross_index[which.max(data$avg.genAccuracy[cross_index])]
# Récupérer le rang et les valeurs d'avg.genAccuracy et avg.genSrate au point de croisement maximal
cross_rank <- data$rank[max_cross_index]
cross_value_accuracy <- data$avg.genAccuracy[max_cross_index]
cross_value_srate <- data$avg.genSrate[max_cross_index]
# Extraire le nom du fichier à partir de l'URL
nom_fichier <- gsub("^.*/(\\d+-\\d+-learn)/.*$", "\\1", url)
# Ajouter les informations au tableau de données
tableau_periode_1 <- rbind(tableau_periode_1, data.frame(nom_fichier = nom_fichier,
max_avg_gen_accuracy = max_value_accuracy,
max_avg_gen_srate = max_value_srate,
cross_rank = cross_rank,
cross_value_accuracy = cross_value_accuracy,
cross_value_srate = cross_value_srate))
}
print(tableau_periode_1)
library(ggplot2)
# Liste des URLs des fichiers
urls <- c("https://raw.githubusercontent.com/NinaComete/DOTG/master/200001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/5001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/10001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/20001-1-learn/average.csv")
# Initialisation du tableau de données
tableau_periode_1 <- data.frame(nom_fichier = character(),
max_avg_gen_accuracy = numeric(),
max_avg_gen_srate = numeric(),
cross_rank = numeric(),
cross_value_accuracy = numeric(),
cross_value_srate = numeric(),
stringsAsFactors = FALSE)
# Boucle sur chaque URL
for (url in urls) {
# Charger les données
data <- read.csv(url, header = TRUE, sep = " ")
# Trouver l'indice où avg.genAccuracy est maximale
max_index_accuracy <- which.max(data$avg.genAccuracy)
max_value_accuracy <- data$avg.genAccuracy[max_index_accuracy]
# Trouver l'indice où avg.genSrate est maximale
max_index_srate <- which.max(data$avg.genSrate)
max_value_srate <- data$avg.genSrate[max_index_srate]
# Trouver tous les points de croisement entre les courbes avg.genAccuracy et avg.genSrate
cross_index <- which(data$avg.genAccuracy >= data$avg.genSrate)
# Sélectionner le point qui maximise avg.genAccuracy parmi les points de croisement
max_cross_index <- cross_index[which.max(data$avg.genAccuracy[cross_index])]
# Récupérer le rang et les valeurs d'avg.genAccuracy et avg.genSrate au point de croisement maximal
cross_rank <- data$rank[max_cross_index]
cross_value_accuracy <- data$avg.genAccuracy[max_cross_index]
cross_value_srate <- data$avg.genSrate[max_cross_index]
# Extraire le nom du fichier à partir de l'URL
nom_fichier <- gsub("^.*/(\\d+-\\d+-learn)/.*$", "\\1", url)
# Ajouter les informations au tableau de données
tableau_periode_1 <- rbind(tableau_periode_1, data.frame(nom_fichier = nom_fichier,
max_avg_gen_accuracy = max_value_accuracy,
max_avg_gen_srate = max_value_srate,
cross_rank = cross_rank,
cross_value_accuracy = cross_value_accuracy,
cross_value_srate = cross_value_srate))
}
library(ggplot2)
# Liste des URLs des fichiers
urls <- c("https://raw.githubusercontent.com/NinaComete/DOTG/master/200001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/5001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/10001-1-learn/average.csv",
"https://raw.githubusercontent.com/NinaComete/DOTG/master/20001-1-learn/average.csv")
# Initialisation du tableau de données
tableau_periode_1 <- data.frame(nom_fichier = character(),
max_avg_gen_accuracy = numeric(),
max_avg_gen_srate = numeric(),
cross_rank = numeric(),
cross_value_accuracy = numeric(),
cross_value_srate = numeric(),
stringsAsFactors = FALSE)
# Boucle sur chaque URL
for (url in urls) {
# Charger les données
data <- read.csv(url, header = TRUE, sep = " ")
# Trouver l'indice où avg.genAccuracy est maximale
max_index_accuracy <- which.max(data$avg.genAccuracy)
max_value_accuracy <- data$avg.genAccuracy[max_index_accuracy]
# Trouver l'indice où avg.genSrate est maximale
max_index_srate <- which.max(data$avg.genSrate)
max_value_srate <- data$avg.genSrate[max_index_srate]
# Trouver tous les points de croisement entre les courbes avg.genAccuracy et avg.genSrate
cross_index <- which(data$avg.genAccuracy >= data$avg.genSrate)
# Sélectionner le point qui maximise avg.genAccuracy parmi les points de croisement
max_cross_index <- cross_index[which.max(data$avg.genAccuracy[cross_index])]
# Récupérer le rang et les valeurs d'avg.genAccuracy et avg.genSrate au point de croisement maximal
cross_rank <- data$rank[max_cross_index]
cross_value_accuracy <- data$avg.genAccuracy[max_cross_index]
cross_value_srate <- data$avg.genSrate[max_cross_index]
# Extraire le nom du fichier à partir de l'URL
nom_fichier <- gsub("^.*/(\\d+-\\d+-learn)/.*$", "\\1", url)
# Ajouter les informations au tableau de données
tableau_periode_1 <- rbind(tableau_periode_1, data.frame(nom_fichier = nom_fichier,
max_avg_gen_accuracy = max_value_accuracy,
max_avg_gen_srate = max_value_srate,
cross_rank = cross_rank,
cross_value_accuracy = cross_value_accuracy,
cross_value_srate = cross_value_srate))
}
print(tableau_periode_1)
View(tableau_periode_1)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("kableExtra")
print(tableau_periode_1)
---
title: |
print(tableau_periode_1)
# Affichage du tableau récapitulatif
kable(tableau_periode_1, format = "html", align = "c", caption = "Tableau récapitulatif des valeurs maximales",
col.names = c("Nom du fichier", "Max \navg.genAccuracy", "Max \navg.genSrate", "Rang de \ncroisement", "Cross value \naccuracy", "Cross value \nsrate"),
row.names = FALSE,
booktabs = TRUE,
linesep = "",
digits = c(0, 2, 2, 0, 2, 2),
longtable = FALSE,
caption.placement = "top") %>%
kable_styling(full_width = FALSE, text_font_size = 10)
