theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate" = "solid", "avg.accuracy" = "solid")) +  # Style des lignes
labs(linetype = "Variable") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique
print(evolution_success_accuracy_G_200001_1_learn_average)
# Trouver le dernier rang de l'itération où les courbes se croisent
rang_stabilite_last <- max(which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement))
# Récupérer le rang de l'itération correspondant au dernier point stable
iteration_stabilite_last <- rang_stabilite_last + 1
# Valeur de avg.accuracy à cet endroit
valeur_stabilite_last <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite_last]
# Modifier le graphique pour inclure l'étiquette au dernier point stable
evolution_success_accuracy_G_200001_1_learn_average <- evolution_success_accuracy_G_200001_1_learn_average +
geom_text(data = data.frame(x = iteration_stabilite_last,
y = valeur_stabilite_last,
label = paste("avg.accuracy : ", round(valeur_stabilite_last, 4), "(", iteration_stabilite_last, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black")  # Ajout du texte pour le dernier point stable
# Afficher le graphique mis à jour
print(evolution_success_accuracy_G_200001_1_learn_average)
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.001
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
rang_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)[1]
# Récupérer le rang de l'itération correspondant à ce premier point stable
iteration_stabilite <- rang_stabilite + 1
# Valeur de avg.accuracy à cet endroit
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
# Modifier le graphique pour inclure l'étiquette au premier point stable
evolution_success_accuracy_G_200001_1_learn_average <- ggplot(data_G_200001_1_learn_average, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "blue", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy"), color = "red") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite,
y = valeur_stabilite,
label = paste("avg.accuracy : ", round(valeur_stabilite, 4), "(", iteration_stabilite, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le premier point stable
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_learn_average : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate" = "solid", "avg.accuracy" = "solid")) +  # Style des lignes
labs(linetype = "Variable") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique
print(evolution_success_accuracy_G_200001_1_learn_average)
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.001
# Vérifier la valeur de seuil_changement
print(seuil_changement)
# Vérifier les valeurs de diff(data_G_200001_1_learn_average$avg.accuracy)
print(diff(data_G_200001_1_learn_average$avg.accuracy))
# Trouver les indices des points de croisement
indices_croisement <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
# Vérifier les indices de croisement
print(indices_croisement)
# Trouver le dernier point de croisement
dernier_croisement <- max(indices_croisement)
# Vérifier le dernier point de croisement
print(dernier_croisement)
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy -----
seuil_changement <- 0.001
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
rang_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)[1]
# Récupérer le rang de l'itération correspondant à ce premier point stable
iteration_stabilite <- rang_stabilite + 1
# Valeur de avg.accuracy à cet endroit
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
# Afficher le résultat
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy -----
seuil_changement <- 0
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
rang_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)[1]
# Récupérer le rang de l'itération correspondant à ce premier point stable
iteration_stabilite <- rang_stabilite + 1
# Valeur de avg.accuracy à cet endroit
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
# Afficher le résultat
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy -----
seuil_changement <- 0.0000001
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
rang_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)[1]
# Récupérer le rang de l'itération correspondant à ce premier point stable
iteration_stabilite <- rang_stabilite + 1
# Valeur de avg.accuracy à cet endroit
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
# Afficher le résultat
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy -----
seuil_changement <- 0.0000000001
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
rang_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)[1]
# Récupérer le rang de l'itération correspondant à ce premier point stable
iteration_stabilite <- rang_stabilite + 1
# Valeur de avg.accuracy à cet endroit
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
# Afficher le résultat
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy -----
seuil_changement <- 0.0000000000001
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
rang_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)[1]
# Récupérer le rang de l'itération correspondant à ce premier point stable
iteration_stabilite <- rang_stabilite + 1
# Valeur de avg.accuracy à cet endroit
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
# Afficher le résultat
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.0001  # Vous pouvez ajuster ce seuil selon vos besoins
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
indices_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations
stabilite_trouvee <- FALSE
for (i in indices_stabilite) {
if (all(diff(data_G_200001_1_learn_average$avg.accuracy[(i+1):(i+10)]) <= seuil_changement)) {
iteration_stabilite <- i + 1
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
stabilite_trouvee <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée
if (stabilite_trouvee) {
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
} else {
print("Aucune stabilité trouvée pour avg.accuracy.")
}
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.0000000000000000000001  # Vous pouvez ajuster ce seuil selon vos besoins
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
indices_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations
stabilite_trouvee <- FALSE
for (i in indices_stabilite) {
if (all(diff(data_G_200001_1_learn_average$avg.accuracy[(i+1):(i+10)]) <= seuil_changement)) {
iteration_stabilite <- i + 1
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
stabilite_trouvee <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée
if (stabilite_trouvee) {
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
} else {
print("Aucune stabilité trouvée pour avg.accuracy.")
}
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.000000000000000000000000000000000000000000000000000000000000001  # Vous pouvez ajuster ce seuil selon vos besoins
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
indices_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations
stabilite_trouvee <- FALSE
for (i in indices_stabilite) {
if (all(diff(data_G_200001_1_learn_average$avg.accuracy[(i+1):(i+10)]) <= seuil_changement)) {
iteration_stabilite <- i + 1
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
stabilite_trouvee <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée
if (stabilite_trouvee) {
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
} else {
print("Aucune stabilité trouvée pour avg.accuracy.")
}
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.000000000000000000000000000000000000000000000000000000000000001  # Vous pouvez ajuster ce seuil selon vos besoins
nb_iterations_verifier <- 1000  # Nombre d'itérations à vérifier après avoir trouvé un point où le changement est inférieur au seuil
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
indices_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations
stabilite_trouvee <- FALSE
for (i in indices_stabilite) {
if (all(diff(data_G_200001_1_learn_average$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite <- i + 1
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
stabilite_trouvee <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée
if (stabilite_trouvee) {
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
} else {
print("Aucune stabilité trouvée pour avg.accuracy.")
}
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.0000001  # Vous pouvez ajuster ce seuil selon vos besoins
nb_iterations_verifier <- 1000  # Nombre d'itérations à vérifier après avoir trouvé un point où le changement est inférieur au seuil
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
indices_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations
stabilite_trouvee <- FALSE
for (i in indices_stabilite) {
if (all(diff(data_G_200001_1_learn_average$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite <- i + 1
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
stabilite_trouvee <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée
if (stabilite_trouvee) {
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
} else {
print("Aucune stabilité trouvée pour avg.accuracy.")
}
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.0000001  # Vous pouvez ajuster ce seuil selon vos besoins
nb_iterations_verifier <- 1000  # Nombre d'itérations à vérifier après avoir trouvé un point où le changement est inférieur au seuil
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
indices_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations
stabilite_trouvee <- FALSE
for (i in indices_stabilite) {
if (all(diff(data_G_200001_1_learn_average$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite <- i + 1
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
stabilite_trouvee <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée
if (stabilite_trouvee) {
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
} else {
print("Aucune stabilité trouvée pour avg.accuracy.")
}
# Modifier le graphique pour inclure l'étiquette au point de croisement des courbes
evolution_success_accuracy_G_200001_1_learn_average <- ggplot(data_G_200001_1_learn_average, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "blue", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy"), color = "red") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite,
y = valeur_stabilite,
label = paste("avg.accuracy : ", round(valeur_stabilite, 4), "(", iteration_stabilite, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le point de croisement
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_learn_average : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate" = "solid", "avg.accuracy" = "solid")) +  # Style des lignes
labs(linetype = "Variable") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique
print(evolution_success_accuracy_G_200001_1_learn_average)
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.0000001  # Vous pouvez ajuster ce seuil selon vos besoins
nb_iterations_verifier <- 1000  # Nombre d'itérations à vérifier après avoir trouvé un point où le changement est inférieur au seuil
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
indices_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations
stabilite_trouvee <- FALSE
for (i in indices_stabilite) {
if (all(diff(data_G_200001_1_learn_average$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite <- i + 1
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
stabilite_trouvee <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée
if (stabilite_trouvee) {
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
} else {
print("Aucune stabilité trouvée pour avg.accuracy.")
}
# Modifier le graphique pour inclure l'étiquette au point de croisement des courbes
evolution_success_accuracy_G_200001_1_learn_average <- ggplot(data_G_200001_1_learn_average, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "blue", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy"), color = "red") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite,
y = valeur_stabilite,
label = paste("avg.ssrate : ", round(data_G_200001_1_learn_average$avg.ssrate[iteration_stabilite], 4),
"\navg.accuracy : ", round(valeur_stabilite, 4), "(", iteration_stabilite, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le point de croisement
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_learn_average : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate" = "solid", "avg.accuracy" = "solid")) +  # Style des lignes
labs(linetype = "Variable") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique
print(evolution_success_accuracy_G_200001_1_learn_average)
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.0000001  # Vous pouvez ajuster ce seuil selon vos besoins
nb_iterations_verifier <- 1000  # Nombre d'itérations à vérifier après avoir trouvé un point où le changement est inférieur au seuil
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
indices_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations
stabilite_trouvee <- FALSE
for (i in indices_stabilite) {
if (all(diff(data_G_200001_1_learn_average$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite <- i + 1
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
stabilite_trouvee <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée
if (stabilite_trouvee) {
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
} else {
print("Aucune stabilité trouvée pour avg.accuracy.")
}
# Modifier le graphique pour inclure l'étiquette au point de croisement des courbes
evolution_success_accuracy_G_200001_1_learn_average <- ggplot(data_G_200001_1_learn_average, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "blue", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy"), color = "red") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite,
y = valeur_stabilite,
label = paste("avg.ssrate : ", round(data_G_200001_1_learn_average$avg.ssrate[iteration_stabilite], 4), "(", iteration_stabilite, ")\n",
"avg.accuracy : ", round(valeur_stabilite, 4), "(", iteration_stabilite, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le point de croisement
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_learn_average : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate" = "solid", "avg.accuracy" = "solid")) +  # Style des lignes
labs(linetype = "Variable") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique
print(evolution_success_accuracy_G_200001_1_learn_average)
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.0000001  # Vous pouvez ajuster ce seuil selon vos besoins
nb_iterations_verifier <- 1000  # Nombre d'itérations à vérifier après avoir trouvé un point où le changement est inférieur au seuil
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
indices_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations
stabilite_trouvee <- FALSE
for (i in indices_stabilite) {
if (all(diff(data_G_200001_1_learn_average$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite <- i + 1
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
stabilite_trouvee <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée
if (stabilite_trouvee) {
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
} else {
print("Aucune stabilité trouvée pour avg.accuracy.")
}
# Modifier le graphique pour inclure l'étiquette au point de croisement des courbes
evolution_success_accuracy_G_200001_1_learn_average <- ggplot(data_G_200001_1_learn_average, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "blue", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy"), color = "red") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite,
y = valeur_stabilite,
label = paste("avg.ssrate : ", round(data_G_200001_1_learn_average$avg.ssrate[iteration_stabilite], 4), "(", iteration_stabilite, ")\n",
"avg.accuracy : ", round(valeur_stabilite, 4), "(", iteration_stabilite, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le point de croisement
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_learn_average : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate" = "solid", "avg.accuracy" = "solid")) +  # Style des lignes
labs(linetype = "Variables") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique
print(evolution_success_accuracy_G_200001_1_learn_average)
# ICI ------
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.0000001  # Vous pouvez ajuster ce seuil selon vos besoins
nb_iterations_verifier <- 1000  # Nombre d'itérations à vérifier après avoir trouvé un point où le changement est inférieur au seuil
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
indices_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
# Identifier la première occurrence où la stabilité est atteinte sur plusieurs itérations
stabilite_trouvee <- FALSE
for (i in indices_stabilite) {
if (all(diff(data_G_200001_1_learn_average$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement)) {
iteration_stabilite <- i + 1
valeur_stabilite <- data_G_200001_1_learn_average$avg.accuracy[iteration_stabilite]
stabilite_trouvee <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée
if (stabilite_trouvee) {
print(paste("La valeur stabilisée de avg.accuracy est :", round(valeur_stabilite, 4), "à l'itération", iteration_stabilite))
} else {
print("Aucune stabilité trouvée pour avg.accuracy.")
}
# Modifier le graphique pour inclure l'étiquette au point de croisement des courbes
evolution_success_accuracy_G_200001_1_learn_average <- ggplot(data_G_200001_1_learn_average, aes(x = seq_along(avg.ssrate), y = avg.ssrate)) +
geom_line(color = "blue", aes(x = seq_along(avg.ssrate), y = avg.ssrate, linetype = "avg.ssrate")) +  # Courbe pour avg.ssrate
geom_line(aes(y = avg.accuracy, linetype = "avg.accuracy"), color = "red") +  # Courbe pour avg.accuracy
geom_text(data = data.frame(x = iteration_stabilite,
y = valeur_stabilite,
label = paste("avg.ssrate : ", round(data_G_200001_1_learn_average$avg.ssrate[iteration_stabilite], 4), "(", iteration_stabilite, ")\n",
"avg.accuracy : ", round(valeur_stabilite, 4), "(", iteration_stabilite, ")")),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +  # Ajout du texte pour le point de croisement
labs(x = "Nombre d'itérations", y = "Valeur") +  # Étiquettes des axes
ggtitle("G_200001_1_learn_average : Valeurs du succès et de la précision par itération") +  # Titre du graphique
theme_minimal() +  # Style minimal du graphique
scale_linetype_manual(values = c("avg.ssrate" = "solid", "avg.accuracy" = "solid")) +  # Style des lignes
labs(linetype = "Variables :") +  # Légende des styles de ligne
theme(legend.position = "top")  # Position de la légende
# Afficher le graphique
print(evolution_success_accuracy_G_200001_1_learn_average)
library(readr)
# Ajout des moyennes de 200001-1-learn et 200001-1-random ------
library(ggplot2)
# Chargement des données
G_200001_1_learn_average <- read.csv("D:\\Users\\hlendrin\\Documents\\R_DOTG\\200001-1-learn\\average.csv", header = TRUE, sep = " ")
G_200001_1_random_average <- read.csv("D:\\Users\\hlendrin\\Documents\\R_DOTG\\200001-1-random\\average.csv", header = TRUE, sep = " ")
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement_200001_1_learn <- 0.0000001  # Seuil pour le fichier 200001-1-learn
seuil_changement_200001_1_random <- 0.0000001  # Seuil pour le fichier 200001-1-random
nb_iterations_verifier <- 1000  # Nombre d'itérations à vérifier après avoir trouvé un point où le changement est inférieur au seuil
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte pour le fichier 200001-1-learn
indices_stabilite_200001_1_learn <- which(diff(G_200001_1_learn_average$avg.accuracy) <= seuil_changement_200001_1_learn)
stabilite_trouvee_200001_1_learn <- FALSE
for (i in indices_stabilite_200001_1_learn) {
if (all(diff(G_200001_1_learn_average$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement_200001_1_learn)) {
iteration_stabilite_200001_1_learn <- i + 1
valeur_stabilite_200001_1_learn <- G_200001_1_learn_average$avg.accuracy[iteration_stabilite_200001_1_learn]
stabilite_trouvee_200001_1_learn <- TRUE
break
}
}
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte pour le fichier 200001-1-random
indices_stabilite_200001_1_random <- which(diff(G_200001_1_random_average$avg.accuracy) <= seuil_changement_200001_1_random)
stabilite_trouvee_200001_1_random <- FALSE
for (i in indices_stabilite_200001_1_random) {
if (all(diff(G_200001_1_random_average$avg.accuracy[(i+1):(i+nb_iterations_verifier)]) <= seuil_changement_200001_1_random)) {
iteration_stabilite_200001_1_random <- i + 1
valeur_stabilite_200001_1_random <- G_200001_1_random_average$avg.accuracy[iteration_stabilite_200001_1_random]
stabilite_trouvee_200001_1_random <- TRUE
break
}
}
# Afficher le résultat si une stabilité est trouvée pour le fichier 200001-1-learn
if (stabilite_trouvee_200001_1_learn) {
print(paste("La valeur stabilisée de avg.accuracy pour le fichier 200001-1-learn est :", round(valeur_stabilite_200001_1_learn, 4), "à l'itération", iteration_stabilite_200001_1_learn))
} else {
print("Aucune stabilité trouvée pour avg.accuracy pour le fichier 200001-1-learn.")
}
# Afficher le résultat si une stabilité est trouvée pour le fichier 200001-1-random
if (stabilite_trouvee_200001_1_random) {
print(paste("La valeur stabilisée de avg.accuracy pour le fichier 200001-1-random est :", round(valeur_stabilite_200001_1_random, 4), "à l'itération", iteration_stabilite_200001_1_random))
} else {
print("Aucune stabilité trouvée pour avg.accuracy pour le fichier 200001-1-random.")
}
graphique <- ggplot() +
geom_line(data = G_200001_1_learn_average, aes(x = seq_along(avg.ssrate), y = avg.ssrate), color = "blue", linetype = "avg.ssrate (200001-1-learn)") +
geom_line(data = G_200001_1_learn_average, aes(x = seq_along(avg.ssrate), y = avg.accuracy), color = "red", linetype = "avg.accuracy (200001-1-learn)") +
geom_line(data = G_200001_1_random_average, aes(x = seq_along(avg.ssrate), y = avg.ssrate), color = "green", linetype = "avg.ssrate (200001-1-random)") +
geom_line(data = G_200001_1_random_average, aes(x = seq_along(avg.ssrate), y = avg.accuracy), color = "orange", linetype = "avg.accuracy (200001-1-random)") +
geom_text(data = data.frame(x = c(iteration_stabilite_200001_1_learn, iteration_stabilite_200001_1_random),
y = c(valeur_stabilite_200001_1_learn, valeur_stabilite_200001_1_random),
label = c(paste("avg.ssrate (200001-1-learn) : ", round(G_200001_1_learn_average$avg.ssrate[iteration_stabilite_200001_1_learn], 4), " (", iteration_stabilite_200001_1_learn, ")\n",
"avg.accuracy (200001-1-learn) : ", round(valeur_stabilite_200001_1_learn, 4), " (", iteration_stabilite_200001_1_learn, ")"),
paste("avg.ssrate (200001-1-random) : ", round(G_200001_1_random_average$avg.ssrate[iteration_stabilite_200001_1_random], 4), " (", iteration_stabilite_200001_1_random, ")\n",
"avg.accuracy (200001-1-random) : ", round(valeur_stabilite_200001_1_random, 4), " (", iteration_stabilite_200001_1_random, ")"))),
aes(x = x, y = y, label = label), hjust = -0.2, vjust = 1, color = "black") +
labs(x = "Nombre d'itérations", y = "Valeur") +
ggtitle("Comparaison des valeurs de succès et de précision par itération entre 200001-1-learn et 200001-1-random") +
theme_minimal() +
scale_linetype_manual(values = c("avg.ssrate (200001-1-learn)" = "solid", "avg.accuracy (200001-1-learn)" = "solid",
"avg.ssrate (200001-1-random)" = "solid", "avg.accuracy (200001-1-random)" = "solid")) +
labs(linetype = "Variable") +
theme(legend.position = "top")
print(graphique)
library(readr)
# Ajout des moyennes de 200001-1-learn ------
#    Importer les données depuis le fichier CSV -----
G_200001_1_learn_average <- read.csv("D:\\Users\\hlendrin\\Documents\\R_DOTG\\200001-1-learn\\average.csv", header = TRUE, sep = " ")
# représentation graphique de "avg.ssrate" et "avg.accuracy" ------
# Seuil de changement minimal pour déterminer la stabilité de avg.accuracy
seuil_changement <- 0.0000001  # Vous pouvez ajuster ce seuil selon vos besoins
nb_iterations_verifier <- 1000  # Nombre d'itérations à vérifier après avoir trouvé un point où le changement est inférieur au seuil
# Trouver le rang de l'itération où la stabilité de avg.accuracy est atteinte
indices_stabilite <- which(diff(data_G_200001_1_learn_average$avg.accuracy) <= seuil_changement)
library(readr)
parameters_200001_1_random <- read_table("200001-1-random/parameters.csv")
View(parameters_200001_1_random)
library(readr)
parameters_200001_1_learn <- read_table("200001-1-learn/parameters.csv")
View(parameters_200001_1_learn)
library(readr)
average_200001_1_learn <- read_table("200001-1-learn/average.csv")
View(average_200001_1_learn)
library(ggplot2)
library(readr)
library(gridExtra)
# Chargement des données
G_200001-0.2-learn <- read.csv("D:\\Users\\hlendrin\\Documents\\R_DOTG\\200001-0.2-learn\\average.csv", header = TRUE, sep = " ")
library(ggplot2)
library(readr)
library(gridExtra)
# Chargement des données
G_200001_02_learn <- read.csv("D:\\Users\\hlendrin\\Documents\\R_DOTG\\200001-0.2-learn\\average.csv", header = TRUE, sep = " ")
G_200001_02_random <- read.csv("D:\\Users\\hlendrin\\Documents\\R_DOTG\\200001-0.2-random\\average.csv", header = TRUE, sep = " ")
View(G_200001_02_learn)
library(readr)
parameters_200001_0_2_learn <- read_table("200001-0.2-learn/parameters.csv")
View(parameters_200001_0_2_learn)
library(readr)
parameters_00001_0_2_random <- read_table("200001-0.2-random/parameters.csv")
View(parameters_00001_0_2_random)
View(parameters_200001_1_random)
View(parameters_200001_0_2_learn)
View(parameters_200001_1_learn)
View(parameters_200001_1_random)
View(parameters_200001_1_random)
library(readr)
parameters_200001_0_8_random <- read_table("200001-0.8-random/parameters.csv")
View(parameters_200001_0_8_random)
View(parameters_200001_0_8_random)
View(parameters_00001_0_2_random)
View(parameters_00001_0_2_random)
